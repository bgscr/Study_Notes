// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: posts.proto

package postservice

import (
	"context"

	"testGoZero/posts/posts"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	PageReq            = posts.PageReq
	PageResp           = posts.PageResp
	PostInfoReq        = posts.PostInfoReq
	PostInfoResp       = posts.PostInfoResp
	SelectPostInfoResp = posts.SelectPostInfoResp
	SinglePostInfoReq  = posts.SinglePostInfoReq
	SinglePostInfoResp = posts.SinglePostInfoResp

	PostService interface {
		CreatePost(ctx context.Context, in *PostInfoReq, opts ...grpc.CallOption) (*PostInfoResp, error)
		GetPost(ctx context.Context, in *SinglePostInfoReq, opts ...grpc.CallOption) (*SinglePostInfoResp, error)
		ListPosts(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*SelectPostInfoResp, error)
		UpdatePost(ctx context.Context, in *PostInfoReq, opts ...grpc.CallOption) (*PostInfoResp, error)
		DeletePost(ctx context.Context, in *PostInfoReq, opts ...grpc.CallOption) (*PostInfoResp, error)
	}

	defaultPostService struct {
		cli zrpc.Client
	}
)

func NewPostService(cli zrpc.Client) PostService {
	return &defaultPostService{
		cli: cli,
	}
}

func (m *defaultPostService) CreatePost(ctx context.Context, in *PostInfoReq, opts ...grpc.CallOption) (*PostInfoResp, error) {
	client := posts.NewPostServiceClient(m.cli.Conn())
	return client.CreatePost(ctx, in, opts...)
}

func (m *defaultPostService) GetPost(ctx context.Context, in *SinglePostInfoReq, opts ...grpc.CallOption) (*SinglePostInfoResp, error) {
	client := posts.NewPostServiceClient(m.cli.Conn())
	return client.GetPost(ctx, in, opts...)
}

func (m *defaultPostService) ListPosts(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*SelectPostInfoResp, error) {
	client := posts.NewPostServiceClient(m.cli.Conn())
	return client.ListPosts(ctx, in, opts...)
}

func (m *defaultPostService) UpdatePost(ctx context.Context, in *PostInfoReq, opts ...grpc.CallOption) (*PostInfoResp, error) {
	client := posts.NewPostServiceClient(m.cli.Conn())
	return client.UpdatePost(ctx, in, opts...)
}

func (m *defaultPostService) DeletePost(ctx context.Context, in *PostInfoReq, opts ...grpc.CallOption) (*PostInfoResp, error) {
	client := posts.NewPostServiceClient(m.cli.Conn())
	return client.DeletePost(ctx, in, opts...)
}
